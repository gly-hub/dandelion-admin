// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sys_menu.proto

package base

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	rpccall "github.com/team-dandelion/go-dandelion/tools/rpccall"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MenuTreeNode struct {
	Id                   uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ParentId             uint32          `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id"`
	Name                 string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Path                 string          `protobuf:"bytes,4,opt,name=path,proto3" json:"path"`
	Type                 int32           `protobuf:"varint,5,opt,name=type,proto3" json:"type"`
	Icon                 string          `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon"`
	Sort                 int32           `protobuf:"varint,7,opt,name=sort,proto3" json:"sort"`
	Status               int32           `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	Children             []*MenuTreeNode `protobuf:"bytes,9,rep,name=children,proto3" json:"children"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MenuTreeNode) Reset()         { *m = MenuTreeNode{} }
func (m *MenuTreeNode) String() string { return proto.CompactTextString(m) }
func (*MenuTreeNode) ProtoMessage()    {}
func (*MenuTreeNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2c2cc0d374d79f, []int{0}
}
func (m *MenuTreeNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MenuTreeNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MenuTreeNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MenuTreeNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuTreeNode.Merge(m, src)
}
func (m *MenuTreeNode) XXX_Size() int {
	return m.Size()
}
func (m *MenuTreeNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuTreeNode.DiscardUnknown(m)
}

var xxx_messageInfo_MenuTreeNode proto.InternalMessageInfo

func (m *MenuTreeNode) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MenuTreeNode) GetParentId() uint32 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *MenuTreeNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MenuTreeNode) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *MenuTreeNode) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *MenuTreeNode) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *MenuTreeNode) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *MenuTreeNode) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *MenuTreeNode) GetChildren() []*MenuTreeNode {
	if m != nil {
		return m.Children
	}
	return nil
}

type GetMenuTreeReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMenuTreeReq) Reset()         { *m = GetMenuTreeReq{} }
func (m *GetMenuTreeReq) String() string { return proto.CompactTextString(m) }
func (*GetMenuTreeReq) ProtoMessage()    {}
func (*GetMenuTreeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2c2cc0d374d79f, []int{1}
}
func (m *GetMenuTreeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMenuTreeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMenuTreeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMenuTreeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMenuTreeReq.Merge(m, src)
}
func (m *GetMenuTreeReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMenuTreeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMenuTreeReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMenuTreeReq proto.InternalMessageInfo

type GetMenuTreeResp struct {
	CommonResp           *rpccall.CommonResp `protobuf:"bytes,1,opt,name=common_resp,json=commonResp,proto3" json:"-"`
	List                 []*MenuTreeNode     `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetMenuTreeResp) Reset()         { *m = GetMenuTreeResp{} }
func (m *GetMenuTreeResp) String() string { return proto.CompactTextString(m) }
func (*GetMenuTreeResp) ProtoMessage()    {}
func (*GetMenuTreeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2c2cc0d374d79f, []int{2}
}
func (m *GetMenuTreeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMenuTreeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMenuTreeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMenuTreeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMenuTreeResp.Merge(m, src)
}
func (m *GetMenuTreeResp) XXX_Size() int {
	return m.Size()
}
func (m *GetMenuTreeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMenuTreeResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMenuTreeResp proto.InternalMessageInfo

func (m *GetMenuTreeResp) GetCommonResp() *rpccall.CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *GetMenuTreeResp) GetList() []*MenuTreeNode {
	if m != nil {
		return m.List
	}
	return nil
}

type CreateMenuReq struct {
	ParentId             uint32   `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Path                 string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type"`
	Icon                 string   `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon"`
	Sort                 int32    `protobuf:"varint,6,opt,name=sort,proto3" json:"sort"`
	Status               int32    `protobuf:"varint,7,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMenuReq) Reset()         { *m = CreateMenuReq{} }
func (m *CreateMenuReq) String() string { return proto.CompactTextString(m) }
func (*CreateMenuReq) ProtoMessage()    {}
func (*CreateMenuReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2c2cc0d374d79f, []int{3}
}
func (m *CreateMenuReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMenuReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMenuReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMenuReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMenuReq.Merge(m, src)
}
func (m *CreateMenuReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateMenuReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMenuReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMenuReq proto.InternalMessageInfo

func (m *CreateMenuReq) GetParentId() uint32 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *CreateMenuReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateMenuReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CreateMenuReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CreateMenuReq) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *CreateMenuReq) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *CreateMenuReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type CreateMenuResp struct {
	CommonResp           *rpccall.CommonResp `protobuf:"bytes,1,opt,name=common_resp,json=commonResp,proto3" json:"-"`
	Id                   uint32              `protobuf:"varint,2,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CreateMenuResp) Reset()         { *m = CreateMenuResp{} }
func (m *CreateMenuResp) String() string { return proto.CompactTextString(m) }
func (*CreateMenuResp) ProtoMessage()    {}
func (*CreateMenuResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2c2cc0d374d79f, []int{4}
}
func (m *CreateMenuResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateMenuResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateMenuResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateMenuResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMenuResp.Merge(m, src)
}
func (m *CreateMenuResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateMenuResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMenuResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMenuResp proto.InternalMessageInfo

func (m *CreateMenuResp) GetCommonResp() *rpccall.CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func (m *CreateMenuResp) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateMenuReq struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ParentId             uint32   `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Path                 string   `protobuf:"bytes,4,opt,name=path,proto3" json:"path"`
	Type                 int32    `protobuf:"varint,5,opt,name=type,proto3" json:"type"`
	Icon                 string   `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon"`
	Sort                 int32    `protobuf:"varint,7,opt,name=sort,proto3" json:"sort"`
	Status               int32    `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMenuReq) Reset()         { *m = UpdateMenuReq{} }
func (m *UpdateMenuReq) String() string { return proto.CompactTextString(m) }
func (*UpdateMenuReq) ProtoMessage()    {}
func (*UpdateMenuReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2c2cc0d374d79f, []int{5}
}
func (m *UpdateMenuReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMenuReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMenuReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMenuReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMenuReq.Merge(m, src)
}
func (m *UpdateMenuReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMenuReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMenuReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMenuReq proto.InternalMessageInfo

func (m *UpdateMenuReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateMenuReq) GetParentId() uint32 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *UpdateMenuReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateMenuReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *UpdateMenuReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UpdateMenuReq) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *UpdateMenuReq) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *UpdateMenuReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type UpdateMenuResp struct {
	CommonResp           *rpccall.CommonResp `protobuf:"bytes,1,opt,name=common_resp,json=commonResp,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UpdateMenuResp) Reset()         { *m = UpdateMenuResp{} }
func (m *UpdateMenuResp) String() string { return proto.CompactTextString(m) }
func (*UpdateMenuResp) ProtoMessage()    {}
func (*UpdateMenuResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2c2cc0d374d79f, []int{6}
}
func (m *UpdateMenuResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMenuResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMenuResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMenuResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMenuResp.Merge(m, src)
}
func (m *UpdateMenuResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMenuResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMenuResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMenuResp proto.InternalMessageInfo

func (m *UpdateMenuResp) GetCommonResp() *rpccall.CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type DeleteMenuReq struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMenuReq) Reset()         { *m = DeleteMenuReq{} }
func (m *DeleteMenuReq) String() string { return proto.CompactTextString(m) }
func (*DeleteMenuReq) ProtoMessage()    {}
func (*DeleteMenuReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2c2cc0d374d79f, []int{7}
}
func (m *DeleteMenuReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMenuReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMenuReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMenuReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMenuReq.Merge(m, src)
}
func (m *DeleteMenuReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMenuReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMenuReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMenuReq proto.InternalMessageInfo

func (m *DeleteMenuReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteMenuResp struct {
	CommonResp           *rpccall.CommonResp `protobuf:"bytes,1,opt,name=common_resp,json=commonResp,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DeleteMenuResp) Reset()         { *m = DeleteMenuResp{} }
func (m *DeleteMenuResp) String() string { return proto.CompactTextString(m) }
func (*DeleteMenuResp) ProtoMessage()    {}
func (*DeleteMenuResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2c2cc0d374d79f, []int{8}
}
func (m *DeleteMenuResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMenuResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMenuResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMenuResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMenuResp.Merge(m, src)
}
func (m *DeleteMenuResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMenuResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMenuResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMenuResp proto.InternalMessageInfo

func (m *DeleteMenuResp) GetCommonResp() *rpccall.CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

type MenuSort struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Sequence             int32    `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence"`
	ParentId             uint32   `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MenuSort) Reset()         { *m = MenuSort{} }
func (m *MenuSort) String() string { return proto.CompactTextString(m) }
func (*MenuSort) ProtoMessage()    {}
func (*MenuSort) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2c2cc0d374d79f, []int{9}
}
func (m *MenuSort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MenuSort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MenuSort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MenuSort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuSort.Merge(m, src)
}
func (m *MenuSort) XXX_Size() int {
	return m.Size()
}
func (m *MenuSort) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuSort.DiscardUnknown(m)
}

var xxx_messageInfo_MenuSort proto.InternalMessageInfo

func (m *MenuSort) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MenuSort) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *MenuSort) GetParentId() uint32 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

type SortMenuReq struct {
	List                 []*MenuSort `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SortMenuReq) Reset()         { *m = SortMenuReq{} }
func (m *SortMenuReq) String() string { return proto.CompactTextString(m) }
func (*SortMenuReq) ProtoMessage()    {}
func (*SortMenuReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2c2cc0d374d79f, []int{10}
}
func (m *SortMenuReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SortMenuReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SortMenuReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SortMenuReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortMenuReq.Merge(m, src)
}
func (m *SortMenuReq) XXX_Size() int {
	return m.Size()
}
func (m *SortMenuReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SortMenuReq.DiscardUnknown(m)
}

var xxx_messageInfo_SortMenuReq proto.InternalMessageInfo

func (m *SortMenuReq) GetList() []*MenuSort {
	if m != nil {
		return m.List
	}
	return nil
}

type SortMenuResp struct {
	CommonResp           *rpccall.CommonResp `protobuf:"bytes,1,opt,name=common_resp,json=commonResp,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SortMenuResp) Reset()         { *m = SortMenuResp{} }
func (m *SortMenuResp) String() string { return proto.CompactTextString(m) }
func (*SortMenuResp) ProtoMessage()    {}
func (*SortMenuResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2c2cc0d374d79f, []int{11}
}
func (m *SortMenuResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SortMenuResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SortMenuResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SortMenuResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortMenuResp.Merge(m, src)
}
func (m *SortMenuResp) XXX_Size() int {
	return m.Size()
}
func (m *SortMenuResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SortMenuResp.DiscardUnknown(m)
}

var xxx_messageInfo_SortMenuResp proto.InternalMessageInfo

func (m *SortMenuResp) GetCommonResp() *rpccall.CommonResp {
	if m != nil {
		return m.CommonResp
	}
	return nil
}

func init() {
	proto.RegisterType((*MenuTreeNode)(nil), "menu_proto.MenuTreeNode")
	proto.RegisterType((*GetMenuTreeReq)(nil), "menu_proto.GetMenuTreeReq")
	proto.RegisterType((*GetMenuTreeResp)(nil), "menu_proto.GetMenuTreeResp")
	proto.RegisterType((*CreateMenuReq)(nil), "menu_proto.CreateMenuReq")
	proto.RegisterType((*CreateMenuResp)(nil), "menu_proto.CreateMenuResp")
	proto.RegisterType((*UpdateMenuReq)(nil), "menu_proto.UpdateMenuReq")
	proto.RegisterType((*UpdateMenuResp)(nil), "menu_proto.UpdateMenuResp")
	proto.RegisterType((*DeleteMenuReq)(nil), "menu_proto.DeleteMenuReq")
	proto.RegisterType((*DeleteMenuResp)(nil), "menu_proto.DeleteMenuResp")
	proto.RegisterType((*MenuSort)(nil), "menu_proto.MenuSort")
	proto.RegisterType((*SortMenuReq)(nil), "menu_proto.SortMenuReq")
	proto.RegisterType((*SortMenuResp)(nil), "menu_proto.SortMenuResp")
}

func init() { proto.RegisterFile("sys_menu.proto", fileDescriptor_9a2c2cc0d374d79f) }

var fileDescriptor_9a2c2cc0d374d79f = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x54, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0x76, 0xd2, 0x1f, 0x9b, 0x7d, 0xdd, 0x56, 0x89, 0x22, 0x71, 0x91, 0xa6, 0xe4, 0x62, 0x11,
	0x36, 0x81, 0x15, 0xbc, 0x2c, 0x08, 0x66, 0x05, 0x11, 0x59, 0x0f, 0xa3, 0x5e, 0xbc, 0x94, 0x34,
	0x79, 0x76, 0x03, 0x49, 0x26, 0x4d, 0x26, 0xe0, 0xfe, 0x03, 0xde, 0xbc, 0xfb, 0x27, 0x79, 0xdc,
	0xbf, 0x20, 0x48, 0xbd, 0xe5, 0xee, 0x5d, 0x66, 0xd2, 0x36, 0xe9, 0xca, 0xb6, 0x42, 0x8f, 0x5e,
	0x5e, 0xdf, 0x7b, 0xdf, 0x7b, 0x99, 0x99, 0xef, 0xe3, 0x2b, 0x0c, 0xb2, 0xab, 0x6c, 0x12, 0x61,
	0x9c, 0x5b, 0x49, 0xca, 0x38, 0xd3, 0x40, 0xe4, 0x13, 0x99, 0x1f, 0x9f, 0xcc, 0x02, 0x7e, 0x99,
	0x4f, 0x2d, 0x8f, 0x45, 0xf6, 0x8c, 0xcd, 0x98, 0x2d, 0xdb, 0xd3, 0xfc, 0xb3, 0xac, 0x64, 0x21,
	0xb3, 0x6a, 0xf5, 0xf8, 0x45, 0x63, 0x9c, 0xa3, 0x1b, 0x9d, 0xf8, 0x6e, 0xec, 0x63, 0x18, 0xb0,
	0xd8, 0x9e, 0xb1, 0x46, 0xc1, 0x19, 0x0b, 0x33, 0x3b, 0x4d, 0x3c, 0xcf, 0x0d, 0x43, 0x3b, 0x0c,
	0xa6, 0xd5, 0xbe, 0x79, 0xad, 0xc0, 0xd1, 0x05, 0xc6, 0xf9, 0x87, 0x14, 0xf1, 0x1d, 0xf3, 0x51,
	0x7b, 0x08, 0x4a, 0xe0, 0xeb, 0x64, 0x44, 0xc6, 0x7d, 0xa7, 0x5b, 0x16, 0x86, 0x12, 0xf8, 0x54,
	0x09, 0x7c, 0xed, 0x29, 0x1c, 0x26, 0x6e, 0x8a, 0x31, 0x9f, 0x04, 0xbe, 0xae, 0x48, 0xb8, 0x5f,
	0x16, 0x46, 0xdd, 0xa4, 0x6a, 0x95, 0xbe, 0xf1, 0xb5, 0xc7, 0xd0, 0x8e, 0xdd, 0x08, 0xf5, 0xd6,
	0x88, 0x8c, 0x0f, 0x1d, 0xb5, 0x2c, 0x0c, 0x59, 0x53, 0x19, 0x05, 0x9a, 0xb8, 0xfc, 0x52, 0x6f,
	0xd7, 0xa8, 0xa8, 0xa9, 0x8c, 0x02, 0xe5, 0x57, 0x09, 0xea, 0x9d, 0x11, 0x19, 0x77, 0x2a, 0x54,
	0xd4, 0x54, 0x46, 0x81, 0x06, 0x1e, 0x8b, 0xf5, 0x6e, 0xbd, 0x2b, 0x6a, 0x2a, 0xa3, 0x40, 0x33,
	0x96, 0x72, 0xfd, 0xa0, 0xde, 0x15, 0x35, 0x95, 0x51, 0x33, 0xa1, 0x9b, 0x71, 0x97, 0xe7, 0x99,
	0xae, 0x4a, 0x1c, 0xca, 0xc2, 0x58, 0x76, 0xe8, 0xf2, 0x57, 0x73, 0x40, 0xf5, 0x2e, 0x83, 0xd0,
	0x4f, 0x31, 0xd6, 0x0f, 0x47, 0xad, 0x71, 0xef, 0x54, 0xb7, 0x6a, 0x71, 0xac, 0x26, 0x53, 0xce,
	0x51, 0x59, 0x18, 0xeb, 0x69, 0xba, 0xce, 0xcc, 0x7b, 0x30, 0x78, 0x8d, 0x7c, 0x35, 0x4a, 0x71,
	0x6e, 0x7e, 0x25, 0x70, 0x77, 0xa3, 0x95, 0x25, 0xda, 0x19, 0xf4, 0x3c, 0x16, 0x45, 0x2c, 0x9e,
	0xa4, 0x98, 0x25, 0x92, 0xf0, 0xde, 0xe9, 0x7d, 0x6b, 0xa9, 0x90, 0x75, 0x2e, 0x31, 0x31, 0xe9,
	0x74, 0xca, 0xc2, 0x20, 0x27, 0x14, 0xbc, 0x75, 0x4b, 0x7b, 0x0e, 0xed, 0x30, 0xc8, 0xb8, 0xae,
	0xec, 0xb8, 0xa2, 0xa4, 0x40, 0x4c, 0x52, 0x19, 0xcd, 0xdf, 0x04, 0xfa, 0xe7, 0x29, 0xba, 0x1c,
	0xc5, 0x18, 0xc5, 0xf9, 0xa6, 0xac, 0xe4, 0xdf, 0x64, 0x55, 0xb6, 0xca, 0xda, 0xda, 0x2a, 0x6b,
	0x7b, 0xab, 0xac, 0x9d, 0xad, 0xb2, 0x76, 0x77, 0xc8, 0x7a, 0x70, 0x9b, 0xac, 0x26, 0xc2, 0xa0,
	0xf9, 0xec, 0x7d, 0xe9, 0xaf, 0x3c, 0xa2, 0xdc, 0xf4, 0x88, 0xf9, 0x4d, 0x81, 0xfe, 0xc7, 0xc4,
	0x6f, 0xd0, 0xfb, 0x5f, 0xbb, 0xc9, 0xbc, 0x80, 0x41, 0x93, 0x8e, 0x3d, 0x69, 0x37, 0x9f, 0x40,
	0xff, 0x15, 0x86, 0xb8, 0x93, 0x5d, 0x71, 0x6e, 0x73, 0x70, 0xdf, 0x73, 0xbf, 0x80, 0x2a, 0x3e,
	0xf4, 0x5e, 0x3c, 0xfb, 0x36, 0x41, 0xc7, 0xa0, 0x66, 0x38, 0xcf, 0x31, 0xf6, 0x2a, 0x7f, 0x74,
	0xaa, 0xbf, 0x87, 0x55, 0x8f, 0xae, 0xb3, 0x4d, 0xe9, 0x5b, 0x5b, 0xa5, 0x37, 0x5f, 0x42, 0x4f,
	0x9c, 0xba, 0x7a, 0xef, 0xe9, 0xd2, 0xf6, 0x44, 0xda, 0xfe, 0xc1, 0x4d, 0xdb, 0x8b, 0xd1, 0xbf,
	0x2c, 0xff, 0x16, 0x8e, 0xea, 0x4f, 0xec, 0xc9, 0x84, 0xf3, 0xe8, 0xc7, 0x62, 0x48, 0xae, 0x17,
	0x43, 0xf2, 0x73, 0x31, 0x24, 0xdf, 0x7f, 0x0d, 0xef, 0x7c, 0x3a, 0xb0, 0xec, 0xb3, 0xa9, 0x9b,
	0xe1, 0xb4, 0x2b, 0xef, 0xf1, 0xec, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xc5, 0x57, 0xd2,
	0xdc, 0x06, 0x00, 0x00,
}

func (m *MenuTreeNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MenuTreeNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MenuTreeNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSysMenu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Status != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.Sort != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintSysMenu(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x32
	}
	if m.Type != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintSysMenu(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSysMenu(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ParentId != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMenuTreeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMenuTreeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMenuTreeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetMenuTreeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMenuTreeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMenuTreeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSysMenu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CommonResp != nil {
		{
			size, err := m.CommonResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysMenu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateMenuReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMenuReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMenuReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.Sort != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintSysMenu(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintSysMenu(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSysMenu(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ParentId != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateMenuResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMenuResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateMenuResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.CommonResp != nil {
		{
			size, err := m.CommonResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysMenu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMenuReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMenuReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMenuReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.Sort != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintSysMenu(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x32
	}
	if m.Type != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintSysMenu(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSysMenu(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ParentId != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMenuResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMenuResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMenuResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommonResp != nil {
		{
			size, err := m.CommonResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysMenu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMenuReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMenuReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMenuReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMenuResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMenuResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMenuResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommonResp != nil {
		{
			size, err := m.CommonResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysMenu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MenuSort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MenuSort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MenuSort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ParentId != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x18
	}
	if m.Sequence != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSysMenu(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SortMenuReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortMenuReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SortMenuReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSysMenu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SortMenuResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortMenuResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SortMenuResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommonResp != nil {
		{
			size, err := m.CommonResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysMenu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSysMenu(dAtA []byte, offset int, v uint64) int {
	offset -= sovSysMenu(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MenuTreeNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSysMenu(uint64(m.Id))
	}
	if m.ParentId != 0 {
		n += 1 + sovSysMenu(uint64(m.ParentId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSysMenu(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSysMenu(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSysMenu(uint64(m.Type))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovSysMenu(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovSysMenu(uint64(m.Sort))
	}
	if m.Status != 0 {
		n += 1 + sovSysMenu(uint64(m.Status))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovSysMenu(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMenuTreeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMenuTreeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonResp != nil {
		l = m.CommonResp.Size()
		n += 1 + l + sovSysMenu(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSysMenu(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateMenuReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentId != 0 {
		n += 1 + sovSysMenu(uint64(m.ParentId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSysMenu(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSysMenu(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSysMenu(uint64(m.Type))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovSysMenu(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovSysMenu(uint64(m.Sort))
	}
	if m.Status != 0 {
		n += 1 + sovSysMenu(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateMenuResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonResp != nil {
		l = m.CommonResp.Size()
		n += 1 + l + sovSysMenu(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSysMenu(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMenuReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSysMenu(uint64(m.Id))
	}
	if m.ParentId != 0 {
		n += 1 + sovSysMenu(uint64(m.ParentId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSysMenu(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSysMenu(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSysMenu(uint64(m.Type))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovSysMenu(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovSysMenu(uint64(m.Sort))
	}
	if m.Status != 0 {
		n += 1 + sovSysMenu(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMenuResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonResp != nil {
		l = m.CommonResp.Size()
		n += 1 + l + sovSysMenu(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteMenuReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSysMenu(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteMenuResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonResp != nil {
		l = m.CommonResp.Size()
		n += 1 + l + sovSysMenu(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MenuSort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSysMenu(uint64(m.Id))
	}
	if m.Sequence != 0 {
		n += 1 + sovSysMenu(uint64(m.Sequence))
	}
	if m.ParentId != 0 {
		n += 1 + sovSysMenu(uint64(m.ParentId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SortMenuReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSysMenu(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SortMenuResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonResp != nil {
		l = m.CommonResp.Size()
		n += 1 + l + sovSysMenu(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSysMenu(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSysMenu(x uint64) (n int) {
	return sovSysMenu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MenuTreeNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MenuTreeNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MenuTreeNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &MenuTreeNode{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMenuTreeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMenuTreeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMenuTreeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSysMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMenuTreeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMenuTreeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMenuTreeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommonResp == nil {
				m.CommonResp = &rpccall.CommonResp{}
			}
			if err := m.CommonResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &MenuTreeNode{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMenuReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMenuReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMenuReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSysMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMenuResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMenuResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMenuResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommonResp == nil {
				m.CommonResp = &rpccall.CommonResp{}
			}
			if err := m.CommonResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSysMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMenuReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMenuReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMenuReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSysMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMenuResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMenuResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMenuResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommonResp == nil {
				m.CommonResp = &rpccall.CommonResp{}
			}
			if err := m.CommonResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMenuReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMenuReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMenuReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSysMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMenuResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMenuResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMenuResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommonResp == nil {
				m.CommonResp = &rpccall.CommonResp{}
			}
			if err := m.CommonResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MenuSort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MenuSort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MenuSort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSysMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SortMenuReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortMenuReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortMenuReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &MenuSort{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SortMenuResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortMenuResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortMenuResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysMenu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommonResp == nil {
				m.CommonResp = &rpccall.CommonResp{}
			}
			if err := m.CommonResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSysMenu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSysMenu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSysMenu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSysMenu
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSysMenu
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSysMenu
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSysMenu        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSysMenu          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSysMenu = fmt.Errorf("proto: unexpected end of group")
)
